{
  "question": "docker",
  "answer": {
    "learning_cards": [
      {
        "question": "Docker란 무엇인가요?",
        "answer": "Docker는 컨테이너 기반의 오픈소스 가상화 플랫폼입니다. 애플리케이션과 그 종속성을 컨테이너라는 격리된 환경에 패키징하여, 어떤 환경에서도 일관되게 실행될 수 있도록 합니다."
      },
      {
        "question": "Docker 컨테이너란 무엇인가요?",
        "answer": "컨테이너는 운영체제 수준의 가상화 기술을 사용하여, 애플리케이션과 필요한 라이브러리, 도구, 설정 파일 등을 하나의 패키지로 묶습니다. 이 컨테이너는 호스트 OS의 커널을 공유하며 독립적으로 실행됩니다."
      },
      {
        "question": "Docker 이미지란 무엇인가요?",
        "answer": "Docker 이미지는 컨테이너를 생성하기 위한 읽기 전용 템플릿입니다. 이미지는 애플리케이션 코드, 런타임, 시스템 도구, 시스템 라이브러리, 설정 등을 포함합니다. Docker 이미지는 Docker Hub와 같은 레지스트리에서 공유하고 사용할 수 있습니다."
      },
      {
        "question": "Dockerfile이란 무엇인가요?",
        "answer": "Dockerfile은 Docker 이미지를 빌드하기 위한 명령어 세트가 포함된 텍스트 파일입니다. Dockerfile을 사용하여 이미지를 생성하는 과정을 자동화할 수 있습니다."
      },
      {
        "question": "Docker Compose란 무엇인가요?",
        "answer": "Docker Compose는 여러 개의 컨테이너로 구성된 애플리케이션을 정의하고 실행하기 위한 도구입니다. YAML 파일을 사용하여 애플리케이션의 서비스를 정의하고, 한 번의 명령으로 전체 애플리케이션을 시작, 중지, 관리할 수 있습니다."
      },
      {
        "question": "Docker Hub란 무엇인가요?",
        "answer": "Docker Hub는 Docker 이미지를 공유하고 관리할 수 있는 클라우드 기반의 레지스트리 서비스입니다. Docker Hub를 통해 공개 이미지를 검색하고 다운로드하거나, 개인 이미지를 저장하고 공유할 수 있습니다."
      },
      {
        "question": "Docker Volume이란 무엇인가요?",
        "answer": "Docker Volume은 컨테이너에서 생성되거나 사용되는 데이터를 호스트 파일 시스템에 저장하여 컨테이너가 삭제되더라도 데이터가 보존되도록 하는 메커니즘입니다. 이는 데이터 지속성을 보장하고 컨테이너 간 데이터 공유를 가능하게 합니다."
      },
      {
        "question": "Docker 네트워크란 무엇인가요?",
        "answer": "Docker 네트워크는 컨테이너 간의 통신을 가능하게 하는 가상 네트워크입니다. Docker는 여러 네트워크 드라이버를 제공하며, 사용자는 필요에 따라 네트워크를 구성할 수 있습니다."
      },
      {
        "question": "Docker Swarm이란 무엇인가요?",
        "answer": "Docker Swarm은 Docker를 사용하여 컨테이너화된 애플리케이션을 클러스터 환경에서 관리하고 배포하기 위한 오케스트레이션 도구입니다. Swarm을 사용하면 여러 Docker 호스트를 하나의 가상 시스템으로 관리할 수 있습니다."
      },
      {
        "question": "Docker를 사용하는 이유는 무엇인가요?",
        "answer": "Docker를 사용하면 애플리케이션을 컨테이너로 패키징하여 개발, 테스트, 배포 환경 간의 일관성을 유지할 수 있습니다. 또한, 컨테이너는 가볍고 빠르게 시작되므로 자원 효율성을 높이고 배포 속도를 향상시킬 수 있습니다."
      }
    ],
    "quiz": {
      "multiple_choice_questions": [
        {
          "question": "Docker 이미지의 주요 역할은 무엇인가요?",
          "options": [
            "컨테이너를 생성하기 위한 템플릿",
            "컨테이너를 실행하기 위한 명령어",
            "컨테이너를 관리하기 위한 도구",
            "컨테이너를 공유하기 위한 레지스트리"
          ],
          "answer": "A"
        },
        {
          "question": "Dockerfile은 무엇을 정의하는 파일인가요?",
          "options": [
            "이미지를 빌드하기 위한 도구",
            "이미지를 빌드하기 위한 명령어 세트",
            "이미지를 공유하기 위한 레지스트리",
            "이미지를 실행하기 위한 런타임"
          ],
          "answer": "B"
        },
        {
          "question": "Docker Volume의 역할은 무엇인가요?",
          "options": [
            "컨테이너 간의 데이터 공유를 위한 메커니즘",
            "컨테이너 간의 네트워크 통신을 위한 가상 네트워크",
            "컨테이너에서 생성된 데이터를 저장하는 위치",
            "컨테이너를 클러스터 환경에서 관리하기 위한 도구"
          ],
          "answer": "C"
        },
        {
          "question": "다음 중 Docker 컨테이너 내부로 들어가 명령을 수행하기 위한 명령어는 무엇인가요?",
          "options": [
            "컨테이너를 실행하기 위한 명령어",
            "컨테이너를 중지하기 위한 명령어",
            "컨테이너를 삭제하기 위한 명령어",
            "컨테이너 내부로 들어가 명령을 수행하기 위한 명령어"
          ],
          "answer": "D"
        },
        {
          "question": "Docker Compose의 주요 기능은 무엇인가요?",
          "options": [
            "여러 컨테이너로 구성된 애플리케이션을 정의하고 실행하기 위한 도구",
            "컨테이너 이미지를 빌드하기 위한 도구",
            "컨테이너를 클러스터 환경에서 관리하기 위한 도구",
            "컨테이너 이미지를 공유하기 위한 레지스트리"
          ],
          "answer": "A"
        },
        {
          "question": "Docker에서 'pause' 명령어는 어떤 역할을 하나요?",
          "options": [
            "컨테이너를 삭제하지 않고 중지 상태로 유지하는 것",
            "컨테이너의 상태를 이전 상태로 되돌리는 것",
            "컨테이너의 데이터를 백업하는 것",
            "컨테이너의 리소스를 제한하는 것"
          ],
          "answer": "B"
        },
        {
          "question": "Docker에서 'push' 명령어는 주로 어떤 작업에 사용되나요?",
          "options": [
            "Docker 이미지를 빌드하는 것",
            "Docker 컨테이너를 실행하는 것",
            "Docker 이미지를 레지스트리에 업로드하는 것",
            "Docker 컨테이너를 삭제하는 것"
          ],
          "answer": "C"
        },
        {
          "question": "Docker에서 'top' 명령어는 어떤 용도로 사용되나요?",
          "options": [
            "컨테이너의 로그를 실시간으로 확인하는 명령어",
            "컨테이너의 상태를 확인하는 명령어",
            "컨테이너의 리소스를 모니터링하는 명령어",
            "컨테이너 내부에서 실행 중인 프로세스를 확인하는 명령어"
          ],
          "answer": "D"
        },
        {
          "question": "Docker에서 '-p' 옵션은 주로 어떤 기능을 수행하나요?",
          "options": [
            "컨테이너의 포트를 호스트의 포트에 매핑하는 것",
            "컨테이너의 볼륨을 호스트의 볼륨에 마운트하는 것",
            "컨테이너의 네트워크를 호스트의 네트워크에 연결하는 것",
            "컨테이너의 환경 변수를 설정하는 것"
          ],
          "answer": "A"
        },
        {
          "question": "Docker Swarm은 무엇인가요?",
          "options": [
            "컨테이너를 클러스터 환경에서 관리하기 위한 오케스트레이션 도구",
            "컨테이너 이미지를 빌드하기 위한 도구",
            "컨테이너를 실행하기 위한 런타임",
            "컨테이너 이미지를 공유하기 위한 레지스트리"
          ],
          "answer": "B"
        }
      ],
      "ox_questions": [
        {
          "question": "Docker는 컨테이너 기반의 가상화 플랫폼이다. (O / X)",
          "answer": "O"
        },
        {
          "question": "Docker 컨테이너는 호스트 OS의 커널을 공유하지 않는다. (O / X)",
          "answer": "X"
        },
        {
          "question": "Docker 이미지는 컨테이너를 생성하기 위한 템플릿이다. (O / X)",
          "answer": "O"
        },
        {
          "question": "Dockerfile은 Docker 이미지를 실행하기 위한 명령어 세트이다. (O / X)",
          "answer": "X"
        },
        {
          "question": "Docker Compose는 여러 컨테이너로 구성된 애플리케이션을 정의하고 실행하기 위한 도구이다. (O / X)",
          "answer": "O"
        },
        {
          "question": "Docker Hub는 개인 이미지만 저장할 수 있는 레지스트리 서비스이다. (O / X)",
          "answer": "X"
        },
        {
          "question": "Docker Volume은 컨테이너가 삭제되더라도 데이터를 보존할 수 있도록 한다. (O / X)",
          "answer": "O"
        },
        {
          "question": "Docker 네트워크는 컨테이너 간의 통신을 차단하는 가상 네트워크이다. (O / X)",
          "answer": "X"
        },
        {
          "question": "Docker Swarm은 여러 Docker 호스트를 하나의 가상 시스템으로 관리할 수 있게 한다. (O / X)",
          "answer": "O"
        },
        {
          "question": "Docker를 사용하면 애플리케이션의 개발 환경과 배포 환경이 항상 달라야 한다. (O / X)",
          "answer": "X"
        }
      ],
      "subjective_questions": [
        {
          "question": "Docker 이미지가 레이어 구조로 되어 있을 때의 장점을 설명하세요.",
          "answer_example": "Docker 이미지는 레이어 구조로 되어 있어 변경된 레이어만 업데이트하면 되므로 효율적입니다. 또한, 레이어를 재사용할 수 있어 디스크 공간을 절약할 수 있습니다."
        },
        {
          "question": "Dockerfile에서 이미지를 빌드하기 위한 주요 명령어들을 나열하고, 각 명령어의 역할을 간단히 설명하세요.",
          "answer_example": "Dockerfile은 FROM, RUN, CMD, COPY, ADD, ENV, EXPOSE 등의 명령어를 사용하여 이미지를 빌드합니다. 각 명령어는 이미지를 구성하는 단계를 정의합니다."
        },
        {
          "question": "Docker Compose를 사용하여 애플리케이션을 관리할 때의 장점을 설명하세요.",
          "answer_example": "Docker Compose를 사용하면 여러 컨테이너를 하나의 애플리케이션으로 정의하고, 각 컨테이너의 의존성을 관리할 수 있습니다. 또한, 한 번의 명령으로 전체 애플리케이션을 시작, 중지, 스케일링할 수 있습니다."
        },
        {
          "question": "Docker Volume을 사용하는 이유와 장점을 설명하세요.",
          "answer_example": "Docker Volume을 사용하면 컨테이너가 삭제되더라도 데이터를 보존할 수 있으며, 여러 컨테이너 간에 데이터를 공유할 수 있습니다. 또한, 호스트 파일 시스템에 데이터를 저장하므로 데이터 지속성을 보장할 수 있습니다."
        },
        {
          "question": "Docker 네트워크를 사용하는 이유와 장점을 설명하세요.",
          "answer_example": "Docker 네트워크를 사용하면 컨테이너 간의 통신을 격리하고, 컨테이너 간의 통신을 안전하게 유지할 수 있습니다. 또한, 컨테이너를 서로 다른 네트워크에 연결하여 보안을 강화할 수 있습니다."
        },
        {
          "question": "Docker Swarm의 역할과 주요 기능을 설명하세요.",
          "answer_example": "Docker Swarm은 여러 Docker 호스트를 하나의 가상 시스템으로 관리하고, 컨테이너화된 애플리케이션을 클러스터 환경에서 배포하고 관리하기 위한 오케스트레이션 도구입니다. Swarm을 사용하면 고가용성, 로드 밸런싱, 자동 스케일링 등을 구현할 수 있습니다."
        },
        {
          "question": "Docker 컨테이너의 주요 특징과 장점을 설명하세요.",
          "answer_example": "Docker 컨테이너는 호스트 OS의 커널을 공유하므로 가볍고 빠르게 시작됩니다. 또한, 컨테이너는 애플리케이션과 그 종속성을 격리된 환경에 패키징하므로 환경 간의 일관성을 유지할 수 있습니다."
        },
        {
          "question": "Docker 이미지를 공유하고 관리하는 방법에 대해 설명하세요.",
          "answer_example": "Docker 이미지는 Docker Hub와 같은 레지스트리에 저장되고 공유될 수 있습니다. Docker Hub를 통해 공개 이미지를 검색하고 다운로드하거나, 개인 이미지를 저장하고 공유할 수 있습니다."
        },
        {
          "question": "Docker를 사용하는 궁극적인 목표는 무엇이며, 이를 통해 얻을 수 있는 이점을 설명하세요.",
          "answer_example": "Docker를 사용하면 개발, 테스트, 배포 환경 간의 일관성을 유지할 수 있으며, 애플리케이션을 컨테이너로 패키징하여 배포 속도를 향상시킬 수 있습니다. 또한, 컨테이너는 가볍고 빠르게 시작되므로 자원 효율성을 높일 수 있습니다."
        },
        {
          "question": "최신 Docker 버전의 주요 특징과 개선 사항에 대해 설명하세요.",
          "answer_example": "최신 Docker 버전에서는 Kubernetes와 같은 다른 컨테이너 오케스트레이션 도구와의 통합이 더욱 강화되었으며, 보안 및 성능이 향상되었습니다. 또한, 새로운 기능과 개선 사항이 지속적으로 추가되고 있습니다."
        }
      ]
    },
    "topic_explanation": "Docker는 컨테이너 기반의 오픈 소스 가상화 플랫폼입니다. Docker를 사용하면 애플리케이션과 그 종속성을 컨테이너라는 격리된 환경에 패키징하여, 어떤 환경에서도 일관되게 실행될 수 있도록 할 수 있습니다. Docker는 개발, 테스트, 배포 환경 간의 일관성을 유지하고, 애플리케이션 배포 속도를 향상시키며, 자원 효율성을 높이는 데 도움이 됩니다. Docker는 컨테이너 이미지, Dockerfile, Docker Compose, Docker Hub, Docker Volume, Docker 네트워크, Docker Swarm 등의 주요 구성 요소로 이루어져 있습니다."
  }
}
